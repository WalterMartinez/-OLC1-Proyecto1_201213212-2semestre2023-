// ------------  Paquete e importaciones ------------
package StatPy;

import java_cup.runtime.*;
import java.util.LinkedList;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}



//------> Declaración de terminales


terminal String RVOID, RMAIN, PARI, PARD, LLAVEI, LLAVED;
terminal String IDENTI, PUNTOYCOMA;
terminal String IGUAL;
terminal String RINT, RDOUBLE, RCHAR, RBOOL, RSTRING;
terminal String MAS, MENOS, POR, DIVIDIDO, ENTERO, DECIMAL;
terminal String CADENA,CARACTER;
terminal String RTRUE,RFALSE;
terminal String MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, IGUALIGUAL, DISTINTO;
terminal String RAND, ROR;
terminal String NEGADO;
terminal String RCONSOLE, RWRITE, PUNTO;
terminal String RIF, RELSE;
terminal String RWHILE;
terminal String RDO;
terminal String RFOR;
terminal String DECREMENTO, INCREMENTO;
terminal String RSWITCH, RCASE, RBREAK, RDEFAULT;
terminal String DOSPUNTOS;
terminal String RGLOBALES, RBARRAS, RPIE;
terminal String CORI, CORD, DOLAR;
terminal String RNEWVAL;
terminal String COMA;       
terminal String RTITULO, REJEX, RVALORES, RTITULOX, RTITULOY;


//------> Declaración de no terminales
non terminal inicio;
non terminal instatpy;
non terminal LinkedList listainstruccion;
non terminal instruccion;
non terminal declaracion;
non terminal tipodato;
non terminal expresion;
non terminal imprimir;
non terminal if;
non terminal while;
non terminal do;
non terminal for;

non terminal switch;
non terminal listacasos;
non terminal caso;
non terminal talvezbreak;
non terminal globales;
non terminal listacontenido;
non terminal contenido;
non terminal listaasigna;
non terminal asigna;
non terminal graficabarras;
non terminal isntbarras;
non terminal listabarras;
non terminal btitulo;
non terminal bnombres;
non terminal bvalores;
non terminal listaejex;
non terminal elementoejex;
non terminal graficapie;
non terminal instpie;
non terminal listabvalores, elementovalores;
non terminal listapie, pnombre, pvariable;
non terminal ptitulo, listaejexp, elementoejexp;
non terminal elementovaloresp, listapvariable;


//------> PRECEDENCIA
precedence left RAND, ROR;
precedence right NEGADO;
precedence left MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, IGUALIGUAL,DISTINTO;
precedence left MAS, MENOS;
precedence left POR, DIVIDIDO;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= instatpy
;

instatpy ::= RVOID RMAIN PARI PARD LLAVEI listainstruccion:lista globales listacontenido LLAVED     {: //Utilidades.Funcion.traduccion = lista; :}
;
 
listainstruccion ::= listainstruccion:lista instruccion:val     {:
                                                                //lista.addAll((LinkedList) val);
                                                                //RESULT = (LinkedList) lista;
                                                                :}
		| instruccion:val       {: 
                                        //LinkedList<String> lista = new LinkedList<>();
                                        //lista.addAll((LinkedList) val);
                                        //RESULT = (LinkedList) lista;
                                         :}
;

instruccion ::= declaracion:val             {:  :}
                | imprimir:val              {:  :}
                | if:val                    {:  :}
                | while
                | do
                | for
                | switch
;


declaracion ::=	tipodato IDENTI:a PUNTOYCOMA                    {:
                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                //lista.add(a.toString()+" = none");
                                                                //RESULT = lista;
                                                                System.out.println(a.toString()+" = none");
                                                                Utilidades.Funcion.traducciontexto +=  a.toString()+" = none"+"\n";                                                                
                                                                :}
                | IDENTI:a IGUAL expresion:val PUNTOYCOMA                       {:
                                                                System.out.println(a.toString()+" = "+val);
                                                                Utilidades.Funcion.traducciontexto +=  a.toString()+" = "+val+"\n";
                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                //lista.add(a.toString()+" = "+val);
                                                                //RESULT = lista;              
                                                                                :}
		| tipodato IDENTI:a IGUAL expresion:val PUNTOYCOMA    {:
                                                                System.out.println(a.toString()+" = "+val);
                                                                Utilidades.Funcion.traducciontexto +=  a.toString()+" = "+val+"\n";
                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                //lista.add(a.toString()+" = "+val);
                                                                //RESULT = lista;

                                                                :}
;


imprimir ::=    RCONSOLE PUNTO RWRITE PARI expresion:val PARD PUNTOYCOMA    {:
                                                                            //LinkedList<String> lista = new LinkedList<>();
                                                                            //lista.add("print("+val+")");
                                                                            System.out.println("print("+val+")");
                                                                            Utilidades.Funcion.traducciontexto +=  "print("+val+")"+"\n";
                                                                            //RESULT = lista;
                                                                            :}

;

if ::=          RIF PARI expresion:exp PARD LLAVEI listainstruccion:inst LLAVED      {:
                                                                            //LinkedList<String> lista = new LinkedList<>();
                                                                            //lista.add("if solo "+exp+":");
                                                                                      
                                                                            //Utilidades.Funcion.contador++;
                                                                            //lista.addAll(Utilidades.Funcion.tabulaciones(inst));
                                                                            //Utilidades.Funcion.contador--;
    
                                                                            //RESULT = lista;
                                                                            
                                                                            System.out.println("if "+exp+":\n"+inst);
                                                                            Utilidades.Funcion.traducciontexto +=  "if "+exp+":\n"+inst+"\n";
                                                                           
                                                                                      :}
                | RIF PARI expresion:exp PARD LLAVEI listainstruccion:instuno LLAVED RELSE LLAVEI listainstruccion:instdos LLAVED {:
                                                                                                              System.out.println("if "+exp+":\n"+instuno+"\n else: \n"+instdos);
                                                                                                                Utilidades.Funcion.traducciontexto +=  "if "+exp+":\n"+instuno+"\n else: \n"+instdos+"\n";
                                                                                                                :}
                | RIF PARI expresion:exp PARD LLAVEI listainstruccion:inst LLAVED RELSE if                      {:
                                                                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                                                                //lista.add("if con elif "+exp+":");
                                                                                                                
                                                                                                                //Utilidades.Funcion.contador++;
                                                                                                                //lista.addAll(Utilidades.Funcion.tabulaciones(inst));
                                                                                                                //Utilidades.Funcion.contador--;
    
                                                                                                                //RESULT = lista;
                                                                                                                System.out.println("if "+exp+":\n"+inst);
                                                                                                                Utilidades.Funcion.traducciontexto +=  "if "+exp+":\n"+inst+"\n";
                                                                                                                :}
;

while ::=       RWHILE PARI expresion PARD LLAVEI listainstruccion LLAVED
;  

do ::=          RDO LLAVEI listainstruccion LLAVED RWHILE PARI expresion PARD PUNTOYCOMA
;     

for ::=         RFOR PARI tipodato IDENTI IGUAL ENTERO PUNTOYCOMA expresion PUNTOYCOMA IDENTI INCREMENTO PARD LLAVEI listainstruccion LLAVED
                | RFOR PARI tipodato IDENTI IGUAL ENTERO PUNTOYCOMA expresion PUNTOYCOMA IDENTI DECREMENTO PARD LLAVEI listainstruccion LLAVED
;

switch ::=      RSWITCH PARI IDENTI PARD LLAVEI listacasos RDEFAULT DOSPUNTOS listainstruccion LLAVED
;

listacasos ::=  listacasos caso
                |caso
;

caso ::=        RCASE ENTERO DOSPUNTOS talvezbreak
;

talvezbreak ::= listainstruccion
                | listainstruccion RBREAK PUNTOYCOMA
;


tipodato ::= 	RINT
		| RDOUBLE
		| RCHAR
		| RBOOL
		| RSTRING	
;


expresion ::= 	expresion:a MAS expresion:b                 {: RESULT = a.toString()+" + "+b.toString(); :}
		| expresion:a MENOS expresion:b             {: RESULT = a.toString()+" - "+b.toString(); :}
		| expresion:a POR expresion:b               {: RESULT = a.toString()+" * "+b.toString(); :}
		| expresion:a DIVIDIDO expresion:b          {: RESULT = a.toString()+" / "+b.toString(); :}
                | expresion:a MENOR expresion:b             {: RESULT = a.toString()+" < "+b.toString(); :}
                | expresion:a MAYOR expresion:b             {: RESULT = a.toString()+" > "+b.toString(); :}
                | expresion:a MENORIGUAL expresion:b        {: RESULT = a.toString()+" <= "+b.toString(); :}
                | expresion:a MAYORIGUAL expresion:b        {: RESULT = a.toString()+" >= "+b.toString(); :}
                | expresion:a IGUALIGUAL expresion:b        {: RESULT = a.toString()+" == "+b.toString(); :}     
                | expresion:a DISTINTO expresion:b          {: RESULT = a.toString()+" != "+b.toString(); :}
                | expresion:a RAND expresion:b              {: RESULT = a.toString()+" and "+b.toString(); :}
                | expresion:a ROR expresion:b               {: RESULT = a.toString()+" or "+b.toString(); :}
                | NEGADO expresion:a                        {: RESULT = "not "+a.toString(); :}
		| ENTERO:val                                {: RESULT = val; :}
		| DECIMAL:val                               {: RESULT = val; :}
                | CADENA:val                                {: RESULT = val; :}
                | CARACTER:val                              {: RESULT = val; :}
                | RTRUE:val                                 {: RESULT = val; :}
                | RFALSE:val                                {: RESULT = val; :}
                | IDENTI:val                                {: RESULT = val; :}
;

globales ::=        RVOID RGLOBALES PARI PARD LLAVEI listaasigna LLAVED
;

listaasigna ::=     listaasigna asigna PUNTOYCOMA
                    | asigna PUNTOYCOMA
                    | error PUNTOYCOMA
;

asigna ::=          RSTRING IDENTI IGUAL CADENA
                    | RDOUBLE IDENTI IGUAL DECIMAL
                    | RSTRING IDENTI IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED
                    | RDOUBLE IDENTI IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED
;

listacontenido ::=  listacontenido contenido
                    | contenido
;

contenido ::=       globales
                    | instruccion
                    | graficabarras
                    | graficapie
;

graficabarras ::=   RVOID RBARRAS PARI PARD LLAVEI isntbarras LLAVED
;

isntbarras ::=      listabarras bnombres listabarras bvalores listabarras
                    | listabarras bvalores listabarras bnombres listabarras
                    | bnombres listabarras bvalores listabarras
                    | bvalores listabarras bnombres listabarras
                    | listabarras bnombres bvalores listabarras
                    | listabarras bvalores bnombres listabarras
                    | listabarras bnombres listabarras bvalores
                    | listabarras bvalores listabarras bnombres
                    | listabarras bnombres bvalores
                    | listabarras bvalores bnombres
                    | bnombres listabarras bvalores
                    | bvalores listabarras bnombres
                    | bnombres bvalores listabarras
                    | bvalores bnombres listabarras
;

listabarras ::=     listabarras btitulo
                    | btitulo 
                    | error PUNTOYCOMA
                    
;

btitulo ::=         RSTRING RTITULO IGUAL IDENTI PUNTOYCOMA
                    | RSTRING RTITULO IGUAL CADENA PUNTOYCOMA
                    | RSTRING RTITULO IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA
                    | RSTRING RTITULOX IGUAL IDENTI PUNTOYCOMA
                    | RSTRING RTITULOX IGUAL CADENA PUNTOYCOMA
                    | RSTRING RTITULOX IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA
                    | RSTRING RTITULOY IGUAL IDENTI PUNTOYCOMA
                    | RSTRING RTITULOY IGUAL CADENA PUNTOYCOMA
                    | RSTRING RTITULOY IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA
                    
;

bnombres ::=        RSTRING CORI CORD REJEX IGUAL LLAVEI listaejex LLAVED PUNTOYCOMA
;

listaejex ::=       listaejex COMA elementoejex 
                    | elementoejex
;

elementoejex ::=    CADENA
                    | IDENTI
                    | DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED
;

bvalores ::=        RDOUBLE CORI CORD RVALORES IGUAL LLAVEI listabvalores LLAVED PUNTOYCOMA
;

listabvalores ::=   listabvalores COMA elementovalores
                    | elementovalores
;

elementovalores ::= DECIMAL
                    | IDENTI
                    | DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED
;

graficapie ::=       RVOID RPIE PARI PARD LLAVEI instpie LLAVED
;

instpie ::=         listapie pnombre listapie pvariable listapie
                    | listapie pvariable listapie pnombre listapie
                    | pnombre listapie pvariable listapie
                    | pvariable listapie pnombre listapie
                    | listapie pnombre pvariable listapie
                    | listapie pvariable pnombre listapie
                    | listapie pnombre listapie pvariable
                    | listapie pvariable listapie pnombre
                    | listapie pnombre pvariable
                    | listapie pvariable pnombre
                    | pnombre listapie pvariable
                    | pvariable listapie pnombre
                    | pnombre pvariable listapie
                    | pvariable pnombre listapie                   
;

listapie ::=        listapie ptitulo
                    | ptitulo 
                    | error PUNTOYCOMA
;

ptitulo ::=         RSTRING RTITULO IGUAL IDENTI PUNTOYCOMA
                    | RSTRING RTITULO IGUAL CADENA PUNTOYCOMA  
                    | RSTRING RTITULO IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA  
                    
;

pnombre ::=         RSTRING CORI CORD REJEX IGUAL LLAVEI listaejexp LLAVED PUNTOYCOMA
;

listaejexp ::=      listaejexp COMA elementoejexp 
                    | elementoejexp
;

elementoejexp ::=   CADENA
                    | IDENTI
                    | DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED
;

pvariable ::=        RDOUBLE CORI CORD RVALORES IGUAL LLAVEI listapvariable LLAVED PUNTOYCOMA
;

listapvariable ::=   listapvariable COMA elementovaloresp
                    | elementovaloresp
;

elementovaloresp ::= DECIMAL
                    | IDENTI
                    | DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED
;
 

