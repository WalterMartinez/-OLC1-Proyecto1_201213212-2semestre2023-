
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package StatPy;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\003\000\002\003" +
    "\013\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\005\000\002\006\006\000\002\006\007\000\002\011" +
    "\011\000\002\012\011\000\002\012\015\000\002\012\013" +
    "\000\002\013\011\000\002\014\013\000\002\015\021\000" +
    "\002\015\021\000\002\016\014\000\002\017\004\000\002" +
    "\017\003\000\002\020\006\000\002\021\003\000\002\021" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\022" +
    "\011\000\002\025\005\000\002\025\004\000\002\025\004" +
    "\000\002\026\006\000\002\026\006\000\002\026\015\000" +
    "\002\026\015\000\002\023\004\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\027\011\000\002\030\007\000\002\030\007" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\031\004" +
    "\000\002\031\003\000\002\031\004\000\002\032\007\000" +
    "\002\032\007\000\002\032\016\000\002\032\007\000\002" +
    "\032\007\000\002\032\016\000\002\032\007\000\002\032" +
    "\007\000\002\032\016\000\002\033\013\000\002\035\005" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\012\000\002\034\013\000\002\041\005\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\012\000\002\037\011\000\002\040\007\000\002\040\007" +
    "\000\002\040\006\000\002\040\006\000\002\040\006\000" +
    "\002\040\006\000\002\040\006\000\002\040\006\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\043\004" +
    "\000\002\043\003\000\002\043\004\000\002\046\007\000" +
    "\002\046\007\000\002\046\016\000\002\044\013\000\002" +
    "\047\005\000\002\047\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\012\000\002\045\013\000\002\052\005" +
    "\000\002\052\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\004\004\005\001\002\000\004\002\000\001" +
    "\002\000\004\005\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\007\012\001\002\000\004\010\013\001\002\000\032" +
    "\012\020\015\024\016\033\017\036\020\025\021\021\045" +
    "\035\050\034\052\017\053\040\054\016\057\015\001\002" +
    "\000\004\012\u0196\001\002\000\004\006\u0184\001\002\000" +
    "\004\006\u0171\001\002\000\004\006\u016b\001\002\000\004" +
    "\014\u0168\001\002\000\004\012\uffe0\001\002\000\044\004" +
    "\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\045\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000\044\004\ufffd" +
    "\011\ufffd\012\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\045\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\001\002\000\004\012\uffe4\001" +
    "\002\000\004\012\uffe1\001\002\000\034\004\136\012\020" +
    "\015\024\016\033\017\036\020\025\021\021\045\035\050" +
    "\034\052\017\053\040\054\016\057\015\001\002\000\044" +
    "\004\ufffc\011\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\045\ufffc\050\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002\000\044\004" +
    "\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\045\ufffa\050\ufffa\052\ufffa\053\ufffa\054\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\044\004\ufff9" +
    "\011\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\045\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\001\002\000\044\004\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\045\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\001\002\000\004\012\uffe3\001\002" +
    "\000\004\006\122\001\002\000\004\047\114\001\002\000" +
    "\004\012\uffe2\001\002\000\044\004\ufff7\011\ufff7\012\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\045\ufff7\050" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\001\002\000\004\010\042\001\002\000\044\004" +
    "\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\045\ufff6\050\ufff6\052\ufff6\053\ufff6\054\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002\000\032\012\020" +
    "\015\024\016\033\017\036\020\025\021\021\045\035\050" +
    "\034\052\017\053\040\054\016\057\015\001\002\000\034" +
    "\011\045\012\020\015\024\016\033\017\036\020\025\021" +
    "\021\045\035\050\034\052\017\053\040\054\016\057\015" +
    "\001\002\000\044\004\ufffe\011\ufffe\012\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\045\ufffe\050\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001" +
    "\002\000\004\052\046\001\002\000\004\006\047\001\002" +
    "\000\022\012\052\026\054\027\051\030\050\031\060\032" +
    "\053\033\057\044\055\001\002\000\036\007\uffd0\013\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002" +
    "\000\036\007\uffd1\013\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\001\002\000\036\007\uffcc\013\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\001\002\000" +
    "\036\007\uffce\013\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\001\002\000\036\007\uffd2\013\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\022" +
    "\012\052\026\054\027\051\030\050\031\060\032\053\033" +
    "\057\044\055\001\002\000\034\007\074\022\067\023\062" +
    "\024\064\025\065\034\063\035\071\036\061\037\066\040" +
    "\072\041\073\042\070\043\075\001\002\000\036\007\uffcd" +
    "\013\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\001\002\000\036\007\uffcf\013\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\001\002\000\022\012\052\026" +
    "\054\027\051\030\050\031\060\032\053\033\057\044\055" +
    "\001\002\000\022\012\052\026\054\027\051\030\050\031" +
    "\060\032\053\033\057\044\055\001\002\000\022\012\052" +
    "\026\054\027\051\030\050\031\060\032\053\033\057\044" +
    "\055\001\002\000\022\012\052\026\054\027\051\030\050" +
    "\031\060\032\053\033\057\044\055\001\002\000\022\012" +
    "\052\026\054\027\051\030\050\031\060\032\053\033\057" +
    "\044\055\001\002\000\022\012\052\026\054\027\051\030" +
    "\050\031\060\032\053\033\057\044\055\001\002\000\022" +
    "\012\052\026\054\027\051\030\050\031\060\032\053\033" +
    "\057\044\055\001\002\000\022\012\052\026\054\027\051" +
    "\030\050\031\060\032\053\033\057\044\055\001\002\000" +
    "\022\012\052\026\054\027\051\030\050\031\060\032\053" +
    "\033\057\044\055\001\002\000\022\012\052\026\054\027" +
    "\051\030\050\031\060\032\053\033\057\044\055\001\002" +
    "\000\022\012\052\026\054\027\051\030\050\031\060\032" +
    "\053\033\057\044\055\001\002\000\004\013\077\001\002" +
    "\000\022\012\052\026\054\027\051\030\050\031\060\032" +
    "\053\033\057\044\055\001\002\000\036\007\uffd4\013\uffd4" +
    "\022\067\023\062\024\064\025\065\034\063\035\071\036" +
    "\061\037\066\040\072\041\073\042\uffd4\043\uffd4\001\002" +
    "\000\044\004\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\045\uffed\050\uffed\052\uffed\053\uffed" +
    "\054\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000" +
    "\036\007\uffd6\013\uffd6\022\067\023\062\024\064\025\065" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\001\002\000\036\007\uffd7\013\uffd7\022\067" +
    "\023\062\024\064\025\065\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002\000\036" +
    "\007\uffda\013\uffda\022\067\023\062\024\064\025\065\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\001\002\000\036\007\uffd5\013\uffd5\022\067\023" +
    "\062\024\064\025\065\034\063\035\071\036\061\037\066" +
    "\040\072\041\073\042\uffd5\043\uffd5\001\002\000\036\007" +
    "\uffdf\013\uffdf\022\uffdf\023\uffdf\024\064\025\065\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\001\002\000\036\007\uffd8\013\uffd8\022\067\023\062" +
    "\024\064\025\065\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000\036\007\uffdc" +
    "\013\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\001\002\000\036\007\uffdd\013\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\001\002\000\036\007\uffdb\013" +
    "\uffdb\022\067\023\062\024\064\025\065\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001" +
    "\002\000\036\007\uffde\013\uffde\022\uffde\023\uffde\024\064" +
    "\025\065\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\001\002\000\036\007\uffd9\013\uffd9" +
    "\022\067\023\062\024\064\025\065\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002" +
    "\000\036\007\uffd3\013\uffd3\022\067\023\062\024\064\025" +
    "\065\034\063\035\071\036\061\037\066\040\072\041\073" +
    "\042\uffd3\043\uffd3\001\002\000\004\046\115\001\002\000" +
    "\004\006\116\001\002\000\022\012\052\026\054\027\051" +
    "\030\050\031\060\032\053\033\057\044\055\001\002\000" +
    "\034\007\120\022\067\023\062\024\064\025\065\034\063" +
    "\035\071\036\061\037\066\040\072\041\073\042\070\043" +
    "\075\001\002\000\004\013\121\001\002\000\044\004\ufff2" +
    "\011\ufff2\012\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\045\ufff2\050\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\001\002\000\022\012\052\026" +
    "\054\027\051\030\050\031\060\032\053\033\057\044\055" +
    "\001\002\000\034\007\124\022\067\023\062\024\064\025" +
    "\065\034\063\035\071\036\061\037\066\040\072\041\073" +
    "\042\070\043\075\001\002\000\004\010\125\001\002\000" +
    "\032\012\020\015\024\016\033\017\036\020\025\021\021" +
    "\045\035\050\034\052\017\053\040\054\016\057\015\001" +
    "\002\000\034\011\127\012\020\015\024\016\033\017\036" +
    "\020\025\021\021\045\035\050\034\052\017\053\040\054" +
    "\016\057\015\001\002\000\046\004\ufff1\011\ufff1\012\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\045\ufff1\050" +
    "\ufff1\051\130\052\ufff1\053\ufff1\054\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\001\002\000\006\010\131\050\034\001" +
    "\002\000\032\012\020\015\024\016\033\017\036\020\025" +
    "\021\021\045\035\050\034\052\017\053\040\054\016\057" +
    "\015\001\002\000\044\004\uffef\011\uffef\012\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\045\uffef\050\uffef\052" +
    "\uffef\053\uffef\054\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\001\002\000\034\011\134\012\020\015\024\016\033\017" +
    "\036\020\025\021\021\045\035\050\034\052\017\053\040" +
    "\054\016\057\015\001\002\000\044\004\ufff0\011\ufff0\012" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\045\ufff0" +
    "\050\ufff0\052\ufff0\053\ufff0\054\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\001\002\000\034\004\206\012\020\015\024" +
    "\016\033\017\036\020\025\021\021\045\035\050\034\052" +
    "\017\053\040\054\016\057\015\001\002\000\004\064\137" +
    "\001\002\000\004\006\140\001\002\000\004\007\141\001" +
    "\002\000\004\010\142\001\002\000\010\003\146\016\145" +
    "\021\147\001\002\000\004\013\202\001\002\000\010\011" +
    "\177\016\145\021\147\001\002\000\004\012\164\001\002" +
    "\000\004\013\163\001\002\000\004\012\150\001\002\000" +
    "\004\014\151\001\002\000\006\030\153\071\152\001\002" +
    "\000\004\010\154\001\002\000\004\013\uffc7\001\002\000" +
    "\004\072\155\001\002\000\004\073\156\001\002\000\004" +
    "\030\157\001\002\000\004\073\160\001\002\000\004\030" +
    "\161\001\002\000\004\011\162\001\002\000\004\013\uffc5" +
    "\001\002\000\010\011\uffc8\016\uffc8\021\uffc8\001\002\000" +
    "\004\014\165\001\002\000\006\027\167\071\166\001\002" +
    "\000\004\010\170\001\002\000\004\013\uffc6\001\002\000" +
    "\004\072\171\001\002\000\004\073\172\001\002\000\004" +
    "\030\173\001\002\000\004\073\174\001\002\000\004\030" +
    "\175\001\002\000\004\011\176\001\002\000\004\013\uffc4" +
    "\001\002\000\036\004\uffcb\011\uffcb\012\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\045\uffcb\050\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\057\uffcb\001\002\000\004\013\201\001" +
    "\002\000\010\011\uffca\016\uffca\021\uffca\001\002\000\010" +
    "\011\uffc9\016\uffc9\021\uffc9\001\002\000\036\004\uffc1\011" +
    "\uffc1\012\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\045\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1\057\uffc1\001" +
    "\002\000\036\004\uffc0\011\uffc0\012\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\045\uffc0\050\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\057\uffc0\001\002\000\036\004\uffbf\011\uffbf" +
    "\012\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\045" +
    "\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\057\uffbf\001\002" +
    "\000\010\064\137\065\215\066\214\001\002\000\036\004" +
    "\206\011\212\012\020\015\024\016\033\017\036\020\025" +
    "\021\021\045\035\050\034\052\017\053\040\054\016\057" +
    "\015\001\002\000\036\004\uffc2\011\uffc2\012\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\045\uffc2\050\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\057\uffc2\001\002\000\036\004\uffbe" +
    "\011\uffbe\012\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\045\uffbe\050\uffbe\052\uffbe\053\uffbe\054\uffbe\057\uffbe" +
    "\001\002\000\004\002\uffff\001\002\000\036\004\uffc3\011" +
    "\uffc3\012\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\045\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\057\uffc3\001" +
    "\002\000\004\006\u010a\001\002\000\004\006\216\001\002" +
    "\000\004\007\217\001\002\000\004\010\220\001\002\000" +
    "\010\003\223\016\222\021\224\001\002\000\010\003\223" +
    "\016\222\021\237\001\002\000\004\067\360\001\002\000" +
    "\004\013\357\001\002\000\012\067\332\074\241\077\243" +
    "\100\242\001\002\000\006\003\223\021\224\001\002\000" +
    "\010\011\uffad\016\uffad\021\uffad\001\002\000\004\011\324" +
    "\001\002\000\006\016\222\021\224\001\002\000\010\003" +
    "\223\016\222\021\237\001\002\000\006\003\223\021\224" +
    "\001\002\000\010\011\uffae\016\uffae\021\uffae\001\002\000" +
    "\010\003\223\011\uffb3\021\237\001\002\000\004\021\224" +
    "\001\002\000\010\003\223\011\uffb5\021\237\001\002\000" +
    "\010\074\241\077\243\100\242\001\002\000\006\011\uffbb" +
    "\021\237\001\002\000\004\014\300\001\002\000\004\014" +
    "\262\001\002\000\004\014\244\001\002\000\010\012\245" +
    "\030\247\071\246\001\002\000\004\013\261\001\002\000" +
    "\004\010\251\001\002\000\004\013\250\001\002\000\010" +
    "\011\uffa7\016\uffa7\021\uffa7\001\002\000\004\072\252\001" +
    "\002\000\004\073\253\001\002\000\004\030\254\001\002" +
    "\000\004\073\255\001\002\000\004\030\256\001\002\000" +
    "\004\011\257\001\002\000\004\013\260\001\002\000\010" +
    "\011\uffa6\016\uffa6\021\uffa6\001\002\000\010\011\uffa8\016" +
    "\uffa8\021\uffa8\001\002\000\010\012\263\030\265\071\264" +
    "\001\002\000\004\013\277\001\002\000\004\010\267\001" +
    "\002\000\004\013\266\001\002\000\010\011\uffa4\016\uffa4" +
    "\021\uffa4\001\002\000\004\072\270\001\002\000\004\073" +
    "\271\001\002\000\004\030\272\001\002\000\004\073\273" +
    "\001\002\000\004\030\274\001\002\000\004\011\275\001" +
    "\002\000\004\013\276\001\002\000\010\011\uffa3\016\uffa3" +
    "\021\uffa3\001\002\000\010\011\uffa5\016\uffa5\021\uffa5\001" +
    "\002\000\010\012\301\030\303\071\302\001\002\000\004" +
    "\013\315\001\002\000\004\010\305\001\002\000\004\013" +
    "\304\001\002\000\010\011\uffaa\016\uffaa\021\uffaa\001\002" +
    "\000\004\072\306\001\002\000\004\073\307\001\002\000" +
    "\004\030\310\001\002\000\004\073\311\001\002\000\004" +
    "\030\312\001\002\000\004\011\313\001\002\000\004\013" +
    "\314\001\002\000\010\011\uffa9\016\uffa9\021\uffa9\001\002" +
    "\000\010\011\uffab\016\uffab\021\uffab\001\002\000\006\011" +
    "\uffb7\021\237\001\002\000\010\003\223\011\uffb4\021\237" +
    "\001\002\000\006\016\222\021\237\001\002\000\010\003" +
    "\223\011\uffb6\021\237\001\002\000\006\011\uffbc\021\237" +
    "\001\002\000\006\011\uffb8\021\237\001\002\000\036\004" +
    "\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\045\uffbd\050\uffbd\052\uffbd\053\uffbd\054\uffbd\057" +
    "\uffbd\001\002\000\006\003\223\021\237\001\002\000\004" +
    "\021\224\001\002\000\010\003\223\011\uffb1\021\237\001" +
    "\002\000\006\011\uffb9\021\237\001\002\000\006\011\uffaf" +
    "\021\237\001\002\000\004\070\333\001\002\000\004\075" +
    "\334\001\002\000\004\014\335\001\002\000\004\010\336" +
    "\001\002\000\010\012\337\030\343\071\341\001\002\000" +
    "\006\011\uff9e\073\uff9e\001\002\000\006\011\354\073\353" +
    "\001\002\000\004\010\344\001\002\000\006\011\uffa0\073" +
    "\uffa0\001\002\000\006\011\uff9f\073\uff9f\001\002\000\004" +
    "\072\345\001\002\000\004\073\346\001\002\000\004\030" +
    "\347\001\002\000\004\073\350\001\002\000\004\030\351" +
    "\001\002\000\004\011\352\001\002\000\006\011\uff9d\073" +
    "\uff9d\001\002\000\010\012\337\030\343\071\341\001\002" +
    "\000\004\013\355\001\002\000\012\003\uffa2\011\uffa2\016" +
    "\uffa2\021\uffa2\001\002\000\006\011\uffa1\073\uffa1\001\002" +
    "\000\010\011\uffac\016\uffac\021\uffac\001\002\000\004\070" +
    "\361\001\002\000\004\076\362\001\002\000\004\014\363" +
    "\001\002\000\004\010\364\001\002\000\010\012\365\027" +
    "\371\071\367\001\002\000\006\011\uff98\073\uff98\001\002" +
    "\000\006\011\u0102\073\u0101\001\002\000\004\010\372\001" +
    "\002\000\006\011\uff9a\073\uff9a\001\002\000\006\011\uff99" +
    "\073\uff99\001\002\000\004\072\373\001\002\000\004\073" +
    "\374\001\002\000\004\030\375\001\002\000\004\073\376" +
    "\001\002\000\004\030\377\001\002\000\004\011\u0100\001" +
    "\002\000\006\011\uff97\073\uff97\001\002\000\010\012\365" +
    "\027\371\071\367\001\002\000\004\013\u0103\001\002\000" +
    "\010\003\uff9c\011\uff9c\021\uff9c\001\002\000\006\011\uff9b" +
    "\073\uff9b\001\002\000\006\003\223\021\237\001\002\000" +
    "\006\016\222\021\237\001\002\000\010\003\223\011\uffb2" +
    "\021\237\001\002\000\006\011\uffba\021\237\001\002\000" +
    "\006\011\uffb0\021\237\001\002\000\004\007\u010b\001\002" +
    "\000\004\010\u010c\001\002\000\010\003\u0110\016\u010e\021" +
    "\u010d\001\002\000\006\067\u0153\074\u011e\001\002\000\004" +
    "\067\u013e\001\002\000\004\011\u013d\001\002\000\004\013" +
    "\u013c\001\002\000\006\003\u0110\021\u010d\001\002\000\010" +
    "\003\u0110\016\u010e\021\u0118\001\002\000\010\011\uff86\016" +
    "\uff86\021\uff86\001\002\000\006\016\u010e\021\u010d\001\002" +
    "\000\006\003\u0110\021\u010d\001\002\000\010\003\u0110\016" +
    "\u010e\021\u0118\001\002\000\010\011\uff87\016\uff87\021\uff87" +
    "\001\002\000\004\074\u011e\001\002\000\010\003\u0110\011" +
    "\uff8d\021\u0118\001\002\000\006\016\u010e\021\u0118\001\002" +
    "\000\010\003\u0110\011\uff8f\021\u0118\001\002\000\006\011" +
    "\uff95\021\u0118\001\002\000\006\011\uff91\021\u0118\001\002" +
    "\000\004\014\u011f\001\002\000\010\012\u0120\030\u0122\071" +
    "\u0121\001\002\000\004\013\u012c\001\002\000\004\010\u0124" +
    "\001\002\000\004\013\u0123\001\002\000\010\011\uff83\016" +
    "\uff83\021\uff83\001\002\000\004\072\u0125\001\002\000\004" +
    "\073\u0126\001\002\000\004\030\u0127\001\002\000\004\073" +
    "\u0128\001\002\000\004\030\u0129\001\002\000\004\011\u012a" +
    "\001\002\000\004\013\u012b\001\002\000\010\011\uff82\016" +
    "\uff82\021\uff82\001\002\000\010\011\uff84\016\uff84\021\uff84" +
    "\001\002\000\010\003\u0110\011\uff8c\021\u0118\001\002\000" +
    "\004\021\u010d\001\002\000\010\003\u0110\011\uff8e\021\u0118" +
    "\001\002\000\006\011\uff94\021\u0118\001\002\000\006\011" +
    "\uff90\021\u0118\001\002\000\006\003\u0110\021\u0118\001\002" +
    "\000\006\016\u010e\021\u0118\001\002\000\010\003\u0110\011" +
    "\uff8b\021\u0118\001\002\000\006\011\uff93\021\u0118\001\002" +
    "\000\006\011\uff89\021\u0118\001\002\000\006\003\u0110\021" +
    "\u0118\001\002\000\004\021\u010d\001\002\000\010\003\u0110" +
    "\011\uff8a\021\u0118\001\002\000\006\011\uff92\021\u0118\001" +
    "\002\000\006\011\uff88\021\u0118\001\002\000\010\011\uff85" +
    "\016\uff85\021\uff85\001\002\000\036\004\uff96\011\uff96\012" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\045\uff96" +
    "\050\uff96\052\uff96\053\uff96\054\uff96\057\uff96\001\002\000" +
    "\004\070\u013f\001\002\000\004\076\u0140\001\002\000\004" +
    "\014\u0141\001\002\000\004\010\u0142\001\002\000\010\012" +
    "\u0143\027\u0146\071\u0144\001\002\000\006\011\uff77\073\uff77" +
    "\001\002\000\004\010\u014c\001\002\000\006\011\u0149\073" +
    "\u0148\001\002\000\006\011\uff78\073\uff78\001\002\000\006" +
    "\011\uff79\073\uff79\001\002\000\010\012\u0143\027\u0146\071" +
    "\u0144\001\002\000\004\013\u014a\001\002\000\010\003\uff7b" +
    "\011\uff7b\021\uff7b\001\002\000\006\011\uff7a\073\uff7a\001" +
    "\002\000\004\072\u014d\001\002\000\004\073\u014e\001\002" +
    "\000\004\030\u014f\001\002\000\004\073\u0150\001\002\000" +
    "\004\030\u0151\001\002\000\004\011\u0152\001\002\000\006" +
    "\011\uff76\073\uff76\001\002\000\004\070\u0154\001\002\000" +
    "\004\075\u0155\001\002\000\004\014\u0156\001\002\000\004" +
    "\010\u0157\001\002\000\010\012\u0158\030\u015c\071\u0159\001" +
    "\002\000\006\011\uff7d\073\uff7d\001\002\000\004\010\u0161" +
    "\001\002\000\006\011\uff7f\073\uff7f\001\002\000\006\011" +
    "\u015e\073\u015d\001\002\000\006\011\uff7e\073\uff7e\001\002" +
    "\000\010\012\u0158\030\u015c\071\u0159\001\002\000\004\013" +
    "\u015f\001\002\000\012\003\uff81\011\uff81\016\uff81\021\uff81" +
    "\001\002\000\006\011\uff80\073\uff80\001\002\000\004\072" +
    "\u0162\001\002\000\004\073\u0163\001\002\000\004\030\u0164" +
    "\001\002\000\004\073\u0165\001\002\000\004\030\u0166\001" +
    "\002\000\004\011\u0167\001\002\000\006\011\uff7c\073\uff7c" +
    "\001\002\000\022\012\052\026\054\027\051\030\050\031" +
    "\060\032\053\033\057\044\055\001\002\000\034\013\u016a" +
    "\022\067\023\062\024\064\025\065\034\063\035\071\036" +
    "\061\037\066\040\072\041\073\042\070\043\075\001\002" +
    "\000\044\004\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\045\ufff4\050\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000" +
    "\022\012\052\026\054\027\051\030\050\031\060\032\053" +
    "\033\057\044\055\001\002\000\034\007\u016d\022\067\023" +
    "\062\024\064\025\065\034\063\035\071\036\061\037\066" +
    "\040\072\041\073\042\070\043\075\001\002\000\004\010" +
    "\u016e\001\002\000\032\012\020\015\024\016\033\017\036" +
    "\020\025\021\021\045\035\050\034\052\017\053\040\054" +
    "\016\057\015\001\002\000\034\011\u0170\012\020\015\024" +
    "\016\033\017\036\020\025\021\021\045\035\050\034\052" +
    "\017\053\040\054\016\057\015\001\002\000\044\004\uffee" +
    "\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\045\uffee\050\uffee\052\uffee\053\uffee\054\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\001\002\000\014\015\024\016" +
    "\033\017\036\020\025\021\021\001\002\000\004\012\u0173" +
    "\001\002\000\004\014\u0174\001\002\000\004\026\u0175\001" +
    "\002\000\004\013\u0176\001\002\000\022\012\052\026\054" +
    "\027\051\030\050\031\060\032\053\033\057\044\055\001" +
    "\002\000\034\013\u0178\022\067\023\062\024\064\025\065" +
    "\034\063\035\071\036\061\037\066\040\072\041\073\042" +
    "\070\043\075\001\002\000\004\012\u0179\001\002\000\006" +
    "\055\u017a\056\u017b\001\002\000\004\007\u0180\001\002\000" +
    "\004\007\u017c\001\002\000\004\010\u017d\001\002\000\032" +
    "\012\020\015\024\016\033\017\036\020\025\021\021\045" +
    "\035\050\034\052\017\053\040\054\016\057\015\001\002" +
    "\000\034\011\u017f\012\020\015\024\016\033\017\036\020" +
    "\025\021\021\045\035\050\034\052\017\053\040\054\016" +
    "\057\015\001\002\000\044\004\uffec\011\uffec\012\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\045\uffec\050\uffec" +
    "\052\uffec\053\uffec\054\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\001\002\000\004\010\u0181\001\002\000\032\012\020" +
    "\015\024\016\033\017\036\020\025\021\021\045\035\050" +
    "\034\052\017\053\040\054\016\057\015\001\002\000\034" +
    "\011\u0183\012\020\015\024\016\033\017\036\020\025\021" +
    "\021\045\035\050\034\052\017\053\040\054\016\057\015" +
    "\001\002\000\044\004\uffeb\011\uffeb\012\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\045\uffeb\050\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001" +
    "\002\000\004\012\u0185\001\002\000\004\007\u0186\001\002" +
    "\000\004\010\u0187\001\002\000\004\060\u018a\001\002\000" +
    "\006\060\u018a\062\u0191\001\002\000\006\060\uffe8\062\uffe8" +
    "\001\002\000\004\026\u018b\001\002\000\004\063\u018c\001" +
    "\002\000\032\012\020\015\024\016\033\017\036\020\025" +
    "\021\021\045\035\050\034\052\017\053\040\054\016\057" +
    "\015\001\002\000\040\012\020\015\024\016\033\017\036" +
    "\020\025\021\021\045\035\050\034\052\017\053\040\054" +
    "\016\057\015\060\uffe6\061\u018f\062\uffe6\001\002\000\006" +
    "\060\uffe7\062\uffe7\001\002\000\004\013\u0190\001\002\000" +
    "\006\060\uffe5\062\uffe5\001\002\000\004\063\u0193\001\002" +
    "\000\006\060\uffe9\062\uffe9\001\002\000\032\012\020\015" +
    "\024\016\033\017\036\020\025\021\021\045\035\050\034" +
    "\052\017\053\040\054\016\057\015\001\002\000\034\011" +
    "\u0195\012\020\015\024\016\033\017\036\020\025\021\021" +
    "\045\035\050\034\052\017\053\040\054\016\057\015\001" +
    "\002\000\044\004\uffea\011\uffea\012\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\045\uffea\050\uffea\052\uffea\053" +
    "\uffea\054\uffea\057\uffea\060\uffea\061\uffea\062\uffea\001\002" +
    "\000\006\013\u0197\014\u0198\001\002\000\044\004\ufff5\011" +
    "\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\045\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\001\002\000\022\012\052\026\054" +
    "\027\051\030\050\031\060\032\053\033\057\044\055\001" +
    "\002\000\034\013\u019a\022\067\023\062\024\064\025\065" +
    "\034\063\035\071\036\061\037\066\040\072\041\073\042" +
    "\070\043\075\001\002\000\044\004\ufff3\011\ufff3\012\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\045\ufff3\050" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\025\005\022\006\026\007\013\011\021\012\027" +
    "\013\030\014\031\015\036\016\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\043\006\026\007\013\011\021\012\027\013\030\014" +
    "\031\015\036\016\040\022\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\042\005\022\006\026\007\013\011\021" +
    "\012\027\013\030\014\031\015\036\016\040\001\001\000" +
    "\024\005\043\006\026\007\013\011\021\012\027\013\030" +
    "\014\031\015\036\016\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\111\001\001\000\004\010\110\001\001\000\004" +
    "\010\107\001\001\000\004\010\106\001\001\000\004\010" +
    "\105\001\001\000\004\010\104\001\001\000\004\010\103" +
    "\001\001\000\004\010\102\001\001\000\004\010\101\001" +
    "\001\000\004\010\100\001\001\000\004\010\077\001\001" +
    "\000\002\001\001\000\004\010\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\125\005\022\006\026\007\013\011" +
    "\021\012\027\013\030\014\031\015\036\016\040\001\001" +
    "\000\024\005\043\006\026\007\013\011\021\012\027\013" +
    "\030\014\031\015\036\016\040\001\001\000\002\001\001" +
    "\000\004\012\131\001\001\000\026\004\132\005\022\006" +
    "\026\007\013\011\021\012\027\013\030\014\031\015\036" +
    "\016\040\001\001\000\002\001\001\000\024\005\043\006" +
    "\026\007\013\011\021\012\027\013\030\014\031\015\036" +
    "\016\040\001\001\000\002\001\001\000\036\005\203\006" +
    "\026\007\013\011\021\012\027\013\030\014\031\015\036" +
    "\016\040\022\202\023\206\024\207\027\204\037\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\143\026\142\001\001\000" +
    "\002\001\001\000\004\026\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\203\006\026\007\013\011\021\012" +
    "\027\013\030\014\031\015\036\016\040\022\202\024\212" +
    "\027\204\037\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\030\226\031\227\032\225\033\220\034\224\001\001" +
    "\000\010\031\u0105\032\225\034\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\325" +
    "\032\225\033\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\232\033\230\034\231\001\001\000\010" +
    "\031\317\032\225\034\316\001\001\000\010\031\234\032" +
    "\225\033\233\001\001\000\002\001\001\000\006\031\315" +
    "\032\225\001\001\000\006\032\232\033\235\001\001\000" +
    "\006\031\237\032\225\001\001\000\002\001\001\000\004" +
    "\032\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\232\001\001\000\006\031\322\032" +
    "\225\001\001\000\006\032\232\034\320\001\001\000\006" +
    "\031\321\032\225\001\001\000\004\032\232\001\001\000" +
    "\004\032\232\001\001\000\002\001\001\000\006\031\330" +
    "\032\225\001\001\000\006\032\232\033\326\001\001\000" +
    "\006\031\327\032\225\001\001\000\004\032\232\001\001" +
    "\000\004\032\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\337" +
    "\036\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\365\042\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\u0108\032" +
    "\225\001\001\000\006\032\232\034\u0106\001\001\000\006" +
    "\031\u0107\032\225\001\001\000\004\032\232\001\001\000" +
    "\004\032\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\040\u010e\043\u0113\044\u0111\045\u0110\046\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\043\u0137\044\u0136\046\u0112\001" +
    "\001\000\010\043\u0132\045\u0131\046\u0112\001\001\000\002" +
    "\001\001\000\010\044\u0115\045\u0114\046\u0116\001\001\000" +
    "\010\043\u012d\044\u012c\046\u0112\001\001\000\010\043\u0119" +
    "\045\u0118\046\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\u011c\046\u0112\001\001\000\006\045\u011a" +
    "\046\u0116\001\001\000\006\043\u011b\046\u0112\001\001\000" +
    "\004\046\u0116\001\001\000\004\046\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\u0130\046\u0112\001" +
    "\001\000\006\044\u012e\046\u0116\001\001\000\006\043\u012f" +
    "\046\u0112\001\001\000\004\046\u0116\001\001\000\004\046" +
    "\u0116\001\001\000\006\043\u0135\046\u0112\001\001\000\006" +
    "\045\u0133\046\u0116\001\001\000\006\043\u0134\046\u0112\001" +
    "\001\000\004\046\u0116\001\001\000\004\046\u0116\001\001" +
    "\000\006\043\u013a\046\u0112\001\001\000\006\044\u0138\046" +
    "\u0116\001\001\000\006\043\u0139\046\u0112\001\001\000\004" +
    "\046\u0116\001\001\000\004\046\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\051\u0146\052" +
    "\u0144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u014a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\u015a\050\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u016b\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u016e\005\022\006\026" +
    "\007\013\011\021\012\027\013\030\014\031\015\036\016" +
    "\040\001\001\000\024\005\043\006\026\007\013\011\021" +
    "\012\027\013\030\014\031\015\036\016\040\001\001\000" +
    "\002\001\001\000\004\007\u0171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u017d\005\022\006\026\007\013" +
    "\011\021\012\027\013\030\014\031\015\036\016\040\001" +
    "\001\000\024\005\043\006\026\007\013\011\021\012\027" +
    "\013\030\014\031\015\036\016\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0181\005\022\006\026" +
    "\007\013\011\021\012\027\013\030\014\031\015\036\016" +
    "\040\001\001\000\024\005\043\006\026\007\013\011\021" +
    "\012\027\013\030\014\031\015\036\016\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u0187\020\u0188\001\001\000\004\020" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\u018c\005\022\006\026\007\013\011" +
    "\021\012\027\013\030\014\031\015\036\016\040\021\u018d" +
    "\001\001\000\024\005\043\006\026\007\013\011\021\012" +
    "\027\013\030\014\031\015\036\016\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0193\005\022\006\026" +
    "\007\013\011\021\012\027\013\030\014\031\015\036\016" +
    "\040\001\001\000\024\005\043\006\026\007\013\011\021" +
    "\012\027\013\030\014\031\015\036\016\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0198\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instatpy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instatpy ::= RVOID RMAIN PARI PARD LLAVEI listainstruccion globales listacontenido LLAVED 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 //Utilidades.Funcion.traduccion = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instatpy",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstruccion ::= listainstruccion instruccion 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                //lista.addAll((LinkedList) val);
                                                                //RESULT = (LinkedList) lista;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listainstruccion ::= instruccion 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        //LinkedList<String> lista = new LinkedList<>();
                                        //lista.addAll((LinkedList) val);
                                        //RESULT = (LinkedList) lista;
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= imprimir 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= if 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= do 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= tipodato IDENTI PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                //lista.add(a.toString()+" = none");
                                                                //RESULT = lista;
                                                                System.out.println(a.toString()+" = none");
                                                                Utilidades.Funcion.traducciontexto +=  a.toString()+" = none"+"\n";                                                                
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= IDENTI IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                System.out.println(a.toString()+" = "+val);
                                                                Utilidades.Funcion.traducciontexto +=  a.toString()+" = "+val+"\n";
                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                //lista.add(a.toString()+" = "+val);
                                                                //RESULT = lista;              
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= tipodato IDENTI IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                System.out.println(a.toString()+" = "+val);
                                                                Utilidades.Funcion.traducciontexto +=  a.toString()+" = "+val+"\n";
                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                //lista.add(a.toString()+" = "+val);
                                                                //RESULT = lista;

                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // imprimir ::= RCONSOLE PUNTO RWRITE PARI expresion PARD PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                            //LinkedList<String> lista = new LinkedList<>();
                                                                            //lista.add("print("+val+")");
                                                                            System.out.println("print("+val+")");
                                                                            Utilidades.Funcion.traducciontexto +=  "print("+val+")"+"\n";
                                                                            //RESULT = lista;
                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= RIF PARI expresion PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                            //LinkedList<String> lista = new LinkedList<>();
                                                                            //lista.add("if solo "+exp+":");
                                                                                      
                                                                            //Utilidades.Funcion.contador++;
                                                                            //lista.addAll(Utilidades.Funcion.tabulaciones(inst));
                                                                            //Utilidades.Funcion.contador--;
    
                                                                            //RESULT = lista;
                                                                            
                                                                            System.out.println("if "+exp+":\n"+inst);
                                                                            Utilidades.Funcion.traducciontexto +=  "if "+exp+":\n"+inst+"\n";
                                                                           
                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if ::= RIF PARI expresion PARD LLAVEI listainstruccion LLAVED RELSE LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int instunoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int instunoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList instuno = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instdosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instdosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList instdos = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                                              System.out.println("if "+exp+":\n"+instuno+"\n else: \n"+instdos);
                                                                                                                Utilidades.Funcion.traducciontexto +=  "if "+exp+":\n"+instuno+"\n else: \n"+instdos+"\n";
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if ::= RIF PARI expresion PARD LLAVEI listainstruccion LLAVED RELSE if 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                                                //LinkedList<String> lista = new LinkedList<>();
                                                                                                                //lista.add("if con elif "+exp+":");
                                                                                                                
                                                                                                                //Utilidades.Funcion.contador++;
                                                                                                                //lista.addAll(Utilidades.Funcion.tabulaciones(inst));
                                                                                                                //Utilidades.Funcion.contador--;
    
                                                                                                                //RESULT = lista;
                                                                                                                System.out.println("if "+exp+":\n"+inst);
                                                                                                                Utilidades.Funcion.traducciontexto +=  "if "+exp+":\n"+inst+"\n";
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // while ::= RWHILE PARI expresion PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // do ::= RDO LLAVEI listainstruccion LLAVED RWHILE PARI expresion PARD PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for ::= RFOR PARI tipodato IDENTI IGUAL ENTERO PUNTOYCOMA expresion PUNTOYCOMA IDENTI INCREMENTO PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // for ::= RFOR PARI tipodato IDENTI IGUAL ENTERO PUNTOYCOMA expresion PUNTOYCOMA IDENTI DECREMENTO PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // switch ::= RSWITCH PARI IDENTI PARD LLAVEI listacasos RDEFAULT DOSPUNTOS listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listacasos ::= listacasos caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacasos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listacasos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacasos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // caso ::= RCASE ENTERO DOSPUNTOS talvezbreak 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // talvezbreak ::= listainstruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("talvezbreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // talvezbreak ::= listainstruccion RBREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("talvezbreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipodato ::= RINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodato ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipodato ::= RCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipodato ::= RBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipodato ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" + "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" - "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" * "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" / "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" < "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" > "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" <= "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" >= "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion IGUALIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" == "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" != "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion RAND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" and "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion ROR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" or "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= NEGADO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "not "+a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= RTRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= RFALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= IDENTI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // globales ::= RVOID RGLOBALES PARI PARD LLAVEI listaasigna LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globales",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaasigna ::= listaasigna asigna PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaasigna",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaasigna ::= asigna PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaasigna",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaasigna ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaasigna",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asigna ::= RSTRING IDENTI IGUAL CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigna",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asigna ::= RDOUBLE IDENTI IGUAL DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigna",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asigna ::= RSTRING IDENTI IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigna",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asigna ::= RDOUBLE IDENTI IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigna",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listacontenido ::= listacontenido contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacontenido",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listacontenido ::= contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacontenido",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenido ::= globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenido ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenido ::= graficabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenido ::= graficapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // graficabarras ::= RVOID RBARRAS PARI PARD LLAVEI isntbarras LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // isntbarras ::= listabarras bnombres listabarras bvalores listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // isntbarras ::= listabarras bvalores listabarras bnombres listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // isntbarras ::= bnombres listabarras bvalores listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // isntbarras ::= bvalores listabarras bnombres listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // isntbarras ::= listabarras bnombres bvalores listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // isntbarras ::= listabarras bvalores bnombres listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // isntbarras ::= listabarras bnombres listabarras bvalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // isntbarras ::= listabarras bvalores listabarras bnombres 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // isntbarras ::= listabarras bnombres bvalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // isntbarras ::= listabarras bvalores bnombres 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // isntbarras ::= bnombres listabarras bvalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // isntbarras ::= bvalores listabarras bnombres 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // isntbarras ::= bnombres bvalores listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // isntbarras ::= bvalores bnombres listabarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isntbarras",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listabarras ::= listabarras btitulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabarras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listabarras ::= btitulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabarras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listabarras ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabarras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // btitulo ::= RSTRING RTITULO IGUAL IDENTI PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // btitulo ::= RSTRING RTITULO IGUAL CADENA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // btitulo ::= RSTRING RTITULO IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // btitulo ::= RSTRING RTITULOX IGUAL IDENTI PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // btitulo ::= RSTRING RTITULOX IGUAL CADENA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // btitulo ::= RSTRING RTITULOX IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // btitulo ::= RSTRING RTITULOY IGUAL IDENTI PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // btitulo ::= RSTRING RTITULOY IGUAL CADENA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // btitulo ::= RSTRING RTITULOY IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("btitulo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bnombres ::= RSTRING CORI CORD REJEX IGUAL LLAVEI listaejex LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bnombres",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listaejex ::= listaejex COMA elementoejex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaejex",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // listaejex ::= elementoejex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaejex",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // elementoejex ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoejex",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // elementoejex ::= IDENTI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoejex",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // elementoejex ::= DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoejex",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bvalores ::= RDOUBLE CORI CORD RVALORES IGUAL LLAVEI listabvalores LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bvalores",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listabvalores ::= listabvalores COMA elementovalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabvalores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // listabvalores ::= elementovalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabvalores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // elementovalores ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementovalores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // elementovalores ::= IDENTI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementovalores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // elementovalores ::= DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementovalores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // graficapie ::= RVOID RPIE PARI PARD LLAVEI instpie LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficapie",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instpie ::= listapie pnombre listapie pvariable listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instpie ::= listapie pvariable listapie pnombre listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instpie ::= pnombre listapie pvariable listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instpie ::= pvariable listapie pnombre listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instpie ::= listapie pnombre pvariable listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instpie ::= listapie pvariable pnombre listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instpie ::= listapie pnombre listapie pvariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instpie ::= listapie pvariable listapie pnombre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instpie ::= listapie pnombre pvariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // instpie ::= listapie pvariable pnombre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // instpie ::= pnombre listapie pvariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // instpie ::= pvariable listapie pnombre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // instpie ::= pnombre pvariable listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // instpie ::= pvariable pnombre listapie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instpie",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // listapie ::= listapie ptitulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listapie",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // listapie ::= ptitulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listapie",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // listapie ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listapie",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ptitulo ::= RSTRING RTITULO IGUAL IDENTI PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptitulo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ptitulo ::= RSTRING RTITULO IGUAL CADENA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptitulo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ptitulo ::= RSTRING RTITULO IGUAL DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptitulo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // pnombre ::= RSTRING CORI CORD REJEX IGUAL LLAVEI listaejexp LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pnombre",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // listaejexp ::= listaejexp COMA elementoejexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaejexp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // listaejexp ::= elementoejexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaejexp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // elementoejexp ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoejexp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // elementoejexp ::= IDENTI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoejexp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // elementoejexp ::= DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoejexp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // pvariable ::= RDOUBLE CORI CORD RVALORES IGUAL LLAVEI listapvariable LLAVED PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pvariable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // listapvariable ::= listapvariable COMA elementovaloresp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listapvariable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listapvariable ::= elementovaloresp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listapvariable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // elementovaloresp ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementovaloresp",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // elementovaloresp ::= IDENTI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementovaloresp",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // elementovaloresp ::= DOLAR LLAVEI RNEWVAL COMA CADENA COMA CADENA LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementovaloresp",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
