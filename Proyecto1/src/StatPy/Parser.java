
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package StatPy;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\005\000\002\006\007\000\002\011\011\000\002\012" +
    "\011\000\002\012\015\000\002\012\013\000\002\013\011" +
    "\000\002\014\013\000\002\015\016\000\002\015\016\000" +
    "\002\016\014\000\002\017\004\000\002\017\003\000\002" +
    "\020\006\000\002\021\003\000\002\021\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\004\005\001\002\000\004\002\000\001" +
    "\002\000\004\005\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\007\012\001\002\000\004\010\013\001\002\000\030" +
    "\015\023\016\032\017\035\020\024\021\020\045\034\050" +
    "\033\052\017\053\037\054\016\057\014\001\002\000\004" +
    "\006\170\001\002\000\004\012\163\001\002\000\004\006" +
    "\143\001\002\000\004\006\135\001\002\000\004\012\uffe1" +
    "\001\002\000\040\011\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\045\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000\040\011" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\045\ufffd" +
    "\050\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\062\ufffd\001\002\000\004\012\uffe5\001\002\000\004" +
    "\012\uffe2\001\002\000\032\011\134\015\023\016\032\017" +
    "\035\020\024\021\020\045\034\050\033\052\017\053\037" +
    "\054\016\057\014\001\002\000\040\011\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\045\ufffc\050\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001" +
    "\002\000\040\011\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\045\ufffa\050\ufffa\052\ufffa\053\ufffa\054\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\040\011\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\045\ufff9\050" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\001\002\000\040\011\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\045\ufff8\050\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\001\002\000" +
    "\004\012\uffe4\001\002\000\004\006\121\001\002\000\004" +
    "\047\113\001\002\000\004\012\uffe3\001\002\000\040\011" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\045\ufff7" +
    "\050\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\001\002\000\004\010\041\001\002\000\040" +
    "\011\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\045" +
    "\ufff6\050\ufff6\052\ufff6\053\ufff6\054\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\001\002\000\030\015\023\016\032\017" +
    "\035\020\024\021\020\045\034\050\033\052\017\053\037" +
    "\054\016\057\014\001\002\000\032\011\044\015\023\016" +
    "\032\017\035\020\024\021\020\045\034\050\033\052\017" +
    "\053\037\054\016\057\014\001\002\000\040\011\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\045\ufffe\050\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\001\002\000\004\052\045\001\002\000\004\006\046" +
    "\001\002\000\022\012\051\026\053\027\050\030\047\031" +
    "\057\032\052\033\056\044\054\001\002\000\036\007\uffd1" +
    "\013\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\001\002\000\036\007\uffd2\013\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\001\002\000\036\007\uffcd\013" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\001" +
    "\002\000\036\007\uffcf\013\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\001\002\000\036\007\uffd3\013\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002" +
    "\000\022\012\051\026\053\027\050\030\047\031\057\032" +
    "\052\033\056\044\054\001\002\000\034\007\074\022\065" +
    "\023\061\024\063\025\064\034\062\035\070\036\060\037" +
    "\066\040\071\041\073\042\067\043\072\001\002\000\036" +
    "\007\uffce\013\uffce\022\uffce\023\uffce\024\uffce\025\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\001\002\000\036\007\uffd0\013\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000\022\012" +
    "\051\026\053\027\050\030\047\031\057\032\052\033\056" +
    "\044\054\001\002\000\022\012\051\026\053\027\050\030" +
    "\047\031\057\032\052\033\056\044\054\001\002\000\022" +
    "\012\051\026\053\027\050\030\047\031\057\032\052\033" +
    "\056\044\054\001\002\000\022\012\051\026\053\027\050" +
    "\030\047\031\057\032\052\033\056\044\054\001\002\000" +
    "\022\012\051\026\053\027\050\030\047\031\057\032\052" +
    "\033\056\044\054\001\002\000\022\012\051\026\053\027" +
    "\050\030\047\031\057\032\052\033\056\044\054\001\002" +
    "\000\022\012\051\026\053\027\050\030\047\031\057\032" +
    "\052\033\056\044\054\001\002\000\022\012\051\026\053" +
    "\027\050\030\047\031\057\032\052\033\056\044\054\001" +
    "\002\000\022\012\051\026\053\027\050\030\047\031\057" +
    "\032\052\033\056\044\054\001\002\000\022\012\051\026" +
    "\053\027\050\030\047\031\057\032\052\033\056\044\054" +
    "\001\002\000\022\012\051\026\053\027\050\030\047\031" +
    "\057\032\052\033\056\044\054\001\002\000\022\012\051" +
    "\026\053\027\050\030\047\031\057\032\052\033\056\044" +
    "\054\001\002\000\004\013\075\001\002\000\040\011\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\045\uffee\050" +
    "\uffee\052\uffee\053\uffee\054\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\001\002\000\036\007\uffd7\013\uffd7\022\065\023" +
    "\061\024\063\025\064\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002\000\036\007" +
    "\uffd5\013\uffd5\022\065\023\061\024\063\025\064\034\062" +
    "\035\070\036\060\037\066\040\071\041\073\042\uffd5\043" +
    "\uffd5\001\002\000\036\007\uffd8\013\uffd8\022\065\023\061" +
    "\024\063\025\064\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000\036\007\uffdb" +
    "\013\uffdb\022\065\023\061\024\063\025\064\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\001\002\000\036\007\uffd6\013\uffd6\022\065\023\061\024" +
    "\063\025\064\034\062\035\070\036\060\037\066\040\071" +
    "\041\073\042\uffd6\043\uffd6\001\002\000\036\007\uffd9\013" +
    "\uffd9\022\065\023\061\024\063\025\064\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\001" +
    "\002\000\036\007\uffe0\013\uffe0\022\uffe0\023\uffe0\024\063" +
    "\025\064\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\001\002\000\036\007\uffdd\013\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\001\002" +
    "\000\036\007\uffde\013\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\001\002\000\036\007\uffdc\013\uffdc\022" +
    "\065\023\061\024\063\025\064\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002\000" +
    "\036\007\uffdf\013\uffdf\022\uffdf\023\uffdf\024\063\025\064" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\001\002\000\036\007\uffda\013\uffda\022\065" +
    "\023\061\024\063\025\064\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\001\002\000\036" +
    "\007\uffd4\013\uffd4\022\065\023\061\024\063\025\064\034" +
    "\062\035\070\036\060\037\066\040\071\041\073\042\uffd4" +
    "\043\uffd4\001\002\000\004\046\114\001\002\000\004\006" +
    "\115\001\002\000\022\012\051\026\053\027\050\030\047" +
    "\031\057\032\052\033\056\044\054\001\002\000\034\007" +
    "\117\022\065\023\061\024\063\025\064\034\062\035\070" +
    "\036\060\037\066\040\071\041\073\042\067\043\072\001" +
    "\002\000\004\013\120\001\002\000\040\011\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\045\ufff3\050\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\001\002\000\022\012\051\026\053\027\050\030\047\031" +
    "\057\032\052\033\056\044\054\001\002\000\034\007\123" +
    "\022\065\023\061\024\063\025\064\034\062\035\070\036" +
    "\060\037\066\040\071\041\073\042\067\043\072\001\002" +
    "\000\004\010\124\001\002\000\030\015\023\016\032\017" +
    "\035\020\024\021\020\045\034\050\033\052\017\053\037" +
    "\054\016\057\014\001\002\000\032\011\126\015\023\016" +
    "\032\017\035\020\024\021\020\045\034\050\033\052\017" +
    "\053\037\054\016\057\014\001\002\000\042\011\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\045\ufff2\050\ufff2" +
    "\051\127\052\ufff2\053\ufff2\054\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\001\002\000\006\010\130\050\033\001\002" +
    "\000\030\015\023\016\032\017\035\020\024\021\020\045" +
    "\034\050\033\052\017\053\037\054\016\057\014\001\002" +
    "\000\040\011\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\045\ufff0\050\ufff0\052\ufff0\053\ufff0\054\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\001\002\000\032\011\133\015" +
    "\023\016\032\017\035\020\024\021\020\045\034\050\033" +
    "\052\017\053\037\054\016\057\014\001\002\000\040\011" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\045\ufff1" +
    "\050\ufff1\052\ufff1\053\ufff1\054\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\001\002\000\004\002\uffff\001\002\000\022" +
    "\012\051\026\053\027\050\030\047\031\057\032\052\033" +
    "\056\044\054\001\002\000\034\007\137\022\065\023\061" +
    "\024\063\025\064\034\062\035\070\036\060\037\066\040" +
    "\071\041\073\042\067\043\072\001\002\000\004\010\140" +
    "\001\002\000\030\015\023\016\032\017\035\020\024\021" +
    "\020\045\034\050\033\052\017\053\037\054\016\057\014" +
    "\001\002\000\032\011\142\015\023\016\032\017\035\020" +
    "\024\021\020\045\034\050\033\052\017\053\037\054\016" +
    "\057\014\001\002\000\040\011\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\045\uffef\050\uffef\052\uffef\053\uffef" +
    "\054\uffef\057\uffef\060\uffef\061\uffef\062\uffef\001\002\000" +
    "\014\015\023\016\032\017\035\020\024\021\020\001\002" +
    "\000\004\013\145\001\002\000\022\012\051\026\053\027" +
    "\050\030\047\031\057\032\052\033\056\044\054\001\002" +
    "\000\034\013\147\022\065\023\061\024\063\025\064\034" +
    "\062\035\070\036\060\037\066\040\071\041\073\042\067" +
    "\043\072\001\002\000\004\012\150\001\002\000\006\055" +
    "\151\056\152\001\002\000\004\007\157\001\002\000\004" +
    "\007\153\001\002\000\004\010\154\001\002\000\030\015" +
    "\023\016\032\017\035\020\024\021\020\045\034\050\033" +
    "\052\017\053\037\054\016\057\014\001\002\000\032\011" +
    "\156\015\023\016\032\017\035\020\024\021\020\045\034" +
    "\050\033\052\017\053\037\054\016\057\014\001\002\000" +
    "\040\011\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\045\uffed\050\uffed\052\uffed\053\uffed\054\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\004\010\160\001\002" +
    "\000\030\015\023\016\032\017\035\020\024\021\020\045" +
    "\034\050\033\052\017\053\037\054\016\057\014\001\002" +
    "\000\032\011\162\015\023\016\032\017\035\020\024\021" +
    "\020\045\034\050\033\052\017\053\037\054\016\057\014" +
    "\001\002\000\040\011\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\045\uffec\050\uffec\052\uffec\053\uffec\054\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\001\002\000\006\013" +
    "\164\014\165\001\002\000\042\011\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\045\ufff5\050\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\001\002\000\022\012\051\026\053\027\050\030\047\031" +
    "\057\032\052\033\056\044\054\001\002\000\034\013\167" +
    "\022\065\023\061\024\063\025\064\034\062\035\070\036" +
    "\060\037\066\040\071\041\073\042\067\043\072\001\002" +
    "\000\042\011\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\045\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000\004\012" +
    "\171\001\002\000\004\007\172\001\002\000\004\010\173" +
    "\001\002\000\004\060\176\001\002\000\006\060\176\062" +
    "\205\001\002\000\006\060\uffe9\062\uffe9\001\002\000\004" +
    "\026\177\001\002\000\004\063\200\001\002\000\030\015" +
    "\023\016\032\017\035\020\024\021\020\045\034\050\033" +
    "\052\017\053\037\054\016\057\014\001\002\000\036\015" +
    "\023\016\032\017\035\020\024\021\020\045\034\050\033" +
    "\052\017\053\037\054\016\057\014\060\uffe7\061\203\062" +
    "\uffe7\001\002\000\006\060\uffe8\062\uffe8\001\002\000\004" +
    "\013\204\001\002\000\006\060\uffe6\062\uffe6\001\002\000" +
    "\004\063\207\001\002\000\006\060\uffea\062\uffea\001\002" +
    "\000\030\015\023\016\032\017\035\020\024\021\020\045" +
    "\034\050\033\052\017\053\037\054\016\057\014\001\002" +
    "\000\032\011\211\015\023\016\032\017\035\020\024\021" +
    "\020\045\034\050\033\052\017\053\037\054\016\057\014" +
    "\001\002\000\040\011\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\045\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\024\005\021\006\025\007\014\011\020\012\026" +
    "\013\027\014\030\015\035\016\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\042\006\025" +
    "\007\014\011\020\012\026\013\027\014\030\015\035\016" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\041\005" +
    "\021\006\025\007\014\011\020\012\026\013\027\014\030" +
    "\015\035\016\037\001\001\000\024\005\042\006\025\007" +
    "\014\011\020\012\026\013\027\014\030\015\035\016\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\110\001\001\000" +
    "\004\010\107\001\001\000\004\010\106\001\001\000\004" +
    "\010\105\001\001\000\004\010\104\001\001\000\004\010" +
    "\103\001\001\000\004\010\102\001\001\000\004\010\101" +
    "\001\001\000\004\010\100\001\001\000\004\010\077\001" +
    "\001\000\004\010\076\001\001\000\004\010\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\124" +
    "\005\021\006\025\007\014\011\020\012\026\013\027\014" +
    "\030\015\035\016\037\001\001\000\024\005\042\006\025" +
    "\007\014\011\020\012\026\013\027\014\030\015\035\016" +
    "\037\001\001\000\002\001\001\000\004\012\130\001\001" +
    "\000\026\004\131\005\021\006\025\007\014\011\020\012" +
    "\026\013\027\014\030\015\035\016\037\001\001\000\002" +
    "\001\001\000\024\005\042\006\025\007\014\011\020\012" +
    "\026\013\027\014\030\015\035\016\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\140\005\021" +
    "\006\025\007\014\011\020\012\026\013\027\014\030\015" +
    "\035\016\037\001\001\000\024\005\042\006\025\007\014" +
    "\011\020\012\026\013\027\014\030\015\035\016\037\001" +
    "\001\000\002\001\001\000\006\006\143\007\014\001\001" +
    "\000\002\001\001\000\004\010\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\154\005" +
    "\021\006\025\007\014\011\020\012\026\013\027\014\030" +
    "\015\035\016\037\001\001\000\024\005\042\006\025\007" +
    "\014\011\020\012\026\013\027\014\030\015\035\016\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\160\005\021\006\025\007\014\011\020\012\026\013\027" +
    "\014\030\015\035\016\037\001\001\000\024\005\042\006" +
    "\025\007\014\011\020\012\026\013\027\014\030\015\035" +
    "\016\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\173\020\174\001\001\000\004" +
    "\020\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\200\005\021\006\025\007\014" +
    "\011\020\012\026\013\027\014\030\015\035\016\037\021" +
    "\201\001\001\000\024\005\042\006\025\007\014\011\020" +
    "\012\026\013\027\014\030\015\035\016\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\207\005\021\006" +
    "\025\007\014\011\020\012\026\013\027\014\030\015\035" +
    "\016\037\001\001\000\024\005\042\006\025\007\014\011" +
    "\020\012\026\013\027\014\030\015\035\016\037\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instatpy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instatpy ::= RVOID RMAIN PARI PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instatpy",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstruccion ::= listainstruccion instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listainstruccion ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= do 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= tipodato IDENTI PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= tipodato IDENTI IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // imprimir ::= RCONSOLE PUNTO RWRITE PARI expresion PARD PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= RIF PARI expresion PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= RIF PARI expresion PARD LLAVEI listainstruccion LLAVED RELSE LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if ::= RIF PARI expresion PARD LLAVEI listainstruccion LLAVED RELSE if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= RWHILE PARI expresion PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // do ::= RDO LLAVEI listainstruccion LLAVED RWHILE PARI expresion PARD PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= RFOR PARI declaracion PUNTOYCOMA expresion PUNTOYCOMA IDENTI INCREMENTO PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for ::= RFOR PARI declaracion PUNTOYCOMA expresion PUNTOYCOMA IDENTI DECREMENTO PARD LLAVEI listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // switch ::= RSWITCH PARI IDENTI PARD LLAVEI listacasos RDEFAULT DOSPUNTOS listainstruccion LLAVED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listacasos ::= listacasos caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacasos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listacasos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacasos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // caso ::= RCASE ENTERO DOSPUNTOS talvezbreak 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // talvezbreak ::= listainstruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("talvezbreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // talvezbreak ::= listainstruccion RBREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("talvezbreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipodato ::= RINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipodato ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodato ::= RCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipodato ::= RBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipodato ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion IGUALIGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion RAND expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion ROR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= NEGADO expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= RTRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= RFALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= IDENTI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
